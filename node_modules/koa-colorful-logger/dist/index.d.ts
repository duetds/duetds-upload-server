/// <reference types="node" />
import Koa from 'koa';
import chalk from 'chalk';
import fs from 'fs';
interface MsgFormatFunction {
    (ctx: Koa.Context, costTime: number): string;
}
interface Config {
    /**
     * Should output logger info to file
     * Default: false
     */
    output?: boolean;
    /**
     * Where is log file in
     * Default: `./logs`
     */
    outputDir?: string;
    /**
     * Only when level exceed your setting will log info be output.
     * Priority: DEBUG < INFO < WARNING < ERROR < CRITICAL
     */
    outputLevel?: Level;
    /**
     * The format of the prefix.
     * Default is: '[level][time] '
     * Available variables:
     * - [level]
     * - [time]
     */
    prefixFormat?: string;
    /**
     * A function that should return a string for message.
     * It will receive two args: 'ctx` and 'costTime'.
     * Default is:
     * ```javascript
     * function (ctx, costTime) {
     *     return `${ctx.method} ${ctx.originalUrl} - ${ctx.status} - ${costTime}ms - ${ctx.ip}`;
     * }
     * ```
     */
    msgFormatFunction?: MsgFormatFunction;
}
declare type Level = 'DEBUG' | 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL';
declare class Logger {
    config: Config;
    _logFilename: string;
    _logFileStream?: fs.WriteStream;
    _format: string;
    _msgFormatFunction: MsgFormatFunction;
    constructor(config: Config);
    /**
     * Return a middleware so you can use it.
     * Ensure that it will be loaded at first.
     */
    middleware(): Koa.Middleware;
    debug(...msg: any): void;
    info(...msg: any): void;
    warning(...msg: any): void;
    error(...msg: any): void;
    critical(...msg: any): void;
    log(level: Level, bodyColorFunc?: chalk.ChalkFunction, ...msg: any): void;
    _getLogPrefix(level: Level, useColor?: boolean): string;
}
export default Logger;
