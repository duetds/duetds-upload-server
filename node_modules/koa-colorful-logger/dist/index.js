"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
function getLogFileName(date) {
    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}.log`;
}
function getChalkFunction(level) {
    switch (level) {
        case 'DEBUG':
            return chalk_1.default.gray;
            break;
        case 'INFO':
            return chalk_1.default.greenBright;
            break;
        case 'WARNING':
            return chalk_1.default.yellowBright;
            break;
        case 'ERROR':
            return chalk_1.default.redBright;
            break;
        case 'CRITICAL':
            return chalk_1.default.red;
            break;
        default:
            return chalk_1.default.white;
            break;
    }
}
function formatDate(date) {
    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}T${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;
}
const defaultMsgFormatFunction = function (ctx, costTime) {
    return `${ctx.method} ${ctx.originalUrl} - ${ctx.status} - ${costTime}ms - ${ctx.ip}`;
};
const LEVEL_RANK = {
    DEBUG: 0,
    INFO: 1,
    WARNING: 2,
    ERROR: 3,
    CRITICAL: 4
};
class Logger {
    constructor(config) {
        config.output = config.output || false;
        config.outputDir = config.outputDir || './logs';
        config.outputLevel = config.outputLevel || 'INFO';
        this.config = config;
        this._logFilename = getLogFileName(new Date());
        this._format = config.prefixFormat || '[level][time] ';
        this._msgFormatFunction = config.msgFormatFunction || defaultMsgFormatFunction;
        if (config.output) {
            try {
                fs_1.default.accessSync(config.outputDir, fs_1.default.constants.F_OK);
            }
            catch (e) {
                // 输出文件夹不存在
                fs_1.default.mkdirSync(config.outputDir);
            }
            try {
                this._logFileStream = fs_1.default.createWriteStream(path_1.default.join(config.outputDir, this._logFilename), { flags: 'a' });
            }
            catch (e) {
                this.warning('Could not access to the log file. File output is now closed.');
                config.output = false;
            }
        }
    }
    /**
     * Return a middleware so you can use it.
     * Ensure that it will be loaded at first.
     */
    middleware() {
        const handler = async (ctx, next) => {
            const timeStart = Date.now();
            await next();
            const timeEnd = Date.now();
            const cost = timeEnd - timeStart;
            const status = ctx.status;
            let level = 'INFO';
            let colorFunc;
            if (status >= 100 && status < 200) {
                // 1xx
                colorFunc = chalk_1.default.gray;
                level = 'INFO';
            }
            else if (status >= 200 && status < 300) {
                // 2xx
                colorFunc = chalk_1.default.white;
                level = 'INFO';
            }
            else if (status >= 300 && status < 400) {
                // 3xx
                colorFunc = chalk_1.default.gray;
                level = 'INFO';
            }
            else if (status >= 400 && status < 500) {
                // 4xx
                colorFunc = chalk_1.default.yellow;
                level = 'INFO';
            }
            else {
                // 5xx
                colorFunc = chalk_1.default.redBright;
                level = 'ERROR';
            }
            let msg = this._msgFormatFunction(ctx, cost);
            this.log(level, colorFunc, msg);
        };
        return handler;
    }
    debug(...msg) {
        this.log('DEBUG', undefined, ...msg);
    }
    info(...msg) {
        this.log('INFO', undefined, ...msg);
    }
    warning(...msg) {
        this.log('WARNING', undefined, ...msg);
    }
    error(...msg) {
        this.log('ERROR', undefined, ...msg);
    }
    critical(...msg) {
        this.log('CRITICAL', undefined, ...msg);
    }
    log(level, bodyColorFunc, ...msg) {
        let printMsg = msg;
        if (bodyColorFunc) {
            printMsg = bodyColorFunc(msg);
        }
        switch (level) {
            case 'DEBUG':
                if (process.env.NODE_ENV === 'development') {
                    console.log(this._getLogPrefix(level, true) + printMsg);
                }
                break;
            default:
                console.log(this._getLogPrefix(level, true) + printMsg);
                break;
        }
        const config = this.config;
        if (config.output && LEVEL_RANK[level] >= LEVEL_RANK[config.outputLevel]) {
            const n = getLogFileName(new Date());
            if (this._logFilename !== n) {
                // 新一天
                this._logFileStream.end(() => {
                    this._logFileStream = fs_1.default.createWriteStream(path_1.default.join(config.outputDir, n), { flags: 'a' });
                    this._logFileStream.write(this._getLogPrefix(level, false) + msg + '\n');
                });
            }
            else {
                this._logFileStream.write(this._getLogPrefix(level, false) + msg + '\n');
            }
        }
    }
    _getLogPrefix(level, useColor) {
        const now = new Date();
        let msg;
        if (useColor) {
            msg = this._format
                .replace('[level]', getChalkFunction(level)(`[${level}]`))
                .replace('[time]', chalk_1.default.cyan(`[${formatDate(now)}]`));
        }
        else {
            msg = this._format
                .replace('[level]', `[${level}]`)
                .replace('[time]', `[${formatDate(now)}]`);
        }
        return msg;
    }
}
exports.default = Logger;
module.exports = Logger;
//# sourceMappingURL=index.js.map